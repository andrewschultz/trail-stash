:: StoryTitle
Trail Stash

:: StoryData
{
  "ifid": "0570A44F-5C6D-4A2A-9482-40658C61E3A9",
  "format": "SugarCube",
  "format-version": "2.30.0",
  "start": "Funny Mound"
}

:: Garbage / Backup Code

:: StoryInit

/% todo (for testing): condense SOLVETHIS if-statements (rm4-7) into a widget %/
/% Hizzy Bub is place, Bed Hangars too, Bay Hut %/

<<set $roomInfo to {}>>
<<set $itemInfo to {}>>
<<set $inventory to []>>
<<set $oldpsg to "">>
<<set $useitem to "">>
<<set $total_map_pieces to 0>>

/% center rooms %/
<<set $roomInfo['Funny Mound'] to {
  exits: [ ['Small Isles', 'to some small isles', '(Small Isles solved)'], ['Ganging Hate', 'near some ganging hate', '(Ganging Hate repelled)'], ['Veering Choice', 'to a Veering Choice', '(opened the veering choice)'], ['Harming Fights', 'to harming fights', '(fixed the harming fights)'], ['Weedy Nerds', 'to some weedy nerds', '(fixed the weedy nerds)'], ['Feeling Diner', 'to the feeling diner', '(fixed the Feeling Diner)'], ],
  todo: "There's a funny mound here that seems to be covering passage elsewhere.",
  done: "With money found here, passages outward have expanded.",
  available: true,
  solved: false,
  looted: false,
  solvedname: 'Money Found'
  }
>>
<<set $roomInfo['Small Isles'] to {
  exits: [ ['Funny Mound', 'to a funny mound', '(Funny Mound solved)'], ['Ganging Hate', 'near some ganging hate', '(Ganging Hate repelled)'], ['Veering Choice', 'to a Veering Choice', '(opened the veering choice)'], ['Drunk Shore', 'to a Drunk Shore', '(Drunk Shore solved)'], ['Wash Pit', 'to the Wash Pit', '(cleaned up the Wash Pit)'], ['Feast Lake', 'to a feast lake', '(made Feast Lake nicer)'] ],
  todo: "In these small isles, people guess they seem content. They don't see any way to get less unhappy. Everything's as good as it can get, and it's okay, they guess.",
  done:	"Perhaps things aren't perfect here, but you boosted things nicely.",
  available: true,
  solved: false,
  looted: false,
  solvedname: "All Smiles"
  }
>>
<<set $roomInfo['Ganging Hate'] to {
  exits: [ ['Funny Mound', 'to a funny mound', '(Funny Mound solved)'], ['Small Isles', 'to some small isles', '(Small Isles solved)'], ['Veering Choice', 'to a Veering Choice', '(opened the veering choice)'], ['Yacking Hard', 'to yacking hard', '(Yacking Hard resolved)'], ['Plaid Base', 'to Plaid Base', '(Plaid Base neutralized)'], ['Rusty Fiddlers', 'to rusty fiddlers', '(Rusty Fiddlers better occupied)'] ],
  todo: "You feel a hunger-induced dislike of anything and everything here.",
  done: "You've managed to make a way through. The hanging gate looks rather beautiful and barely reminds you of previous hostilities.",
  available: true,
  solved: false,
  looted: false,
  solvedname: "Hanging Gate"
  }
>>
<<set $roomInfo['Veering Choice'] to {
  exits: [ ['Funny Mound', 'to a funny mound', '(Funny Mound solved)'], ['Ganging Hate', 'near some ganging hate', '(Ganging Hate repelled)'], ['Small Isles', 'to some small isles', '(Small Isles solved)'], ['Peer Class', 'to a peer class', '(Peer Class solved)'], ['Blighters Rock', 'to Blighters Rock', '(Blighters Rock happified)'], ['Brainy Zoo', 'to a Brainy Zoo', '(Brainy Zoo fed)'] ],
  todo: "You sense there are possibilities just out of reach, if you knew how to access them.",
  done: "A cheering voice in the background helps you feel you can and will look through other possibilities.",
  available: true,
  solved: false,
  looted: false,
  solvedname: "Cheering Voice"
  }
>>

/% sector 1 %/
<<set $roomInfo['Harming Fights'] to {
  exits: [ ['Funny Mound', 'back to a funny mound', '(Funny Mound solved)'] ],
  todo: "Ugh! People here are squabbling about anything and everything. Boy, they think, if they get the right weapons, it'd really be on!<p />Perhaps you can slip them something bogus to get their hopes up and discourage such nonsense.",
  done: "Whines for peace have supplanted war cries, and the people who once fought work together to, like, grow stuff. You just hope they share the profits equally.",
  available: false,
  solved: false,
  looted: false,
  solvedname: "Farming Heights"
  }
>>
<<set $roomInfo['Weedy Nerds'] to {
  exits: [ ['Funny Mound', 'back to a funny mound', '(Funny Mound solved)'] ],
  todo: "Weedy nerds mill about here, posing about how much they know, but perhaps not being well-rounded enough.",
  done: "The ex-weedy nerds will never be jocks and wouldn't want to be--they wouldn't be true to themselves--but they're ",
  available: false,
  solved: false,
  looted: false,
  solvedname: "Needy Words"
  }
>>
<<set $roomInfo['Feeling Diner'] to {
  exits: [ ['Funny Mound', 'back to a funny mound', '(Funny Mound solved)'] ],
  todo: "People mope about here, eating bland food, bemoaning bland lives.",
  done: "With a more exciting array of foods, people are enjoying their meals here more.",
  available: false,
  solved: false,
  looted: false,
  solvedname: "Dealing Finer"
  }
>>

/% sector 2 %/
<<set $roomInfo['Wash Pit'] to {
  exits: [ ['Small Isles', 'back to small isles', '(Small Isles solved)'] ],
  todo: "Here people come to be washed free of seemingly lower-class stuff that isn't that bad. Existential despair!",
  done: "The posh wit here is more intellectually high-class than social.",
  available: false,
  solved: false,
  looted: false,
  solvedname: "Posh Wit"
  }
>>
<<set $roomInfo['Drunk Shore'] to {
  exits: [ ['Small Isles', 'back to small isles', '(Small Isles solved)'] ],
  todo: "You feel a bit loopy from the fumes of what seems to be a lake. You're not sure. But it also feels sluggish. Maybe the right chemical reaction could uncover something underneath.",
  done: "There's nothing more behind the shrunk door. But it smells and looks nicer than the alcohol fumes.",
  available: false,
  solved: false,
  looted: false,
  solvedname: "Shrunk Door"
  }
>>
<<set $roomInfo['Feast Lake'] to {
  exits: [ ['Small Isles', 'back to small isles', '(Small Isles solved)'] ],
  todo: "People eat guiltily here, wondering if they really deserve such a nice meal, maybe hoping for someone to compare themselves to so they don't feel so bad.",
  done: "People eat and chat away happily, admitting their faults without being too proud of them.",
  available: false,
  solved: false,
  looted: false,
  solvedname: "Least Fake"
  }
>>

/% sector 3 %/

<<set $roomInfo['Peer Class'] to {
  exits: [ ['Veering Choice', 'back to veering choice', '(Veering Choice mowered through)'] ],
  todo: "All manner of instruction is going on, but alas, some peers appear to be fraudulent. If only you had something that could detect frauds.",
  done: "The level of discussion in this educational circle is beyond you, but hey, you got your map piece.",
  available: false,
  solved: false,
  looted: false,
  solvedname: "Clear Pass"
  }
>>
<<set $roomInfo['Blighters Rock'] to {
  exits: [ ['Veering Choice', 'back to veering choice', '(Veering Choice mowered through)'] ],
  todo: "Everyone here bemoans their lot in life, that they were meant for more than the nine-to-five. They could use a pick-me-up.",
  done: "Fortunately, this is more a block of writers than people moaning about writers' block. They don't need to be disturbed now.",
  available: false,
  solved: false,
  looted: false,
  solvedname: "Writers' Block"
  }
>>
<<set $roomInfo['Brainy Zoo'] to {
  exits: [ ['Veering Choice', 'back to veering choice', '(Veering Choice mowered through)'] ],
  todo: "Some very smart animals potter around here looking for stimulation and nourishment.",
  done: "The animals used what they found from the snide tracks to produce a business selling zany brew.",
  available: false,
  solved: false,
  looted: false,
  solvedname: "Zany Brew"
  }
>>

/% sector 4 %/

<<set $roomInfo['Yacking Hard'] to {
  exits: [ ['Ganging Hate', 'back to hanging gate', '(Hanging Gate traversed)'] ],
  todo: "There's lots of useless chatter around here, none of it particularly productive, mostly people who are bragging about how smart they are.",
  done: "Inspired by seeing the tech chip you provided, people now search for knowledge here.",
  available: false,
  solved: false,
  looted: false,
  solvedname: "Hacking Yard"
  }
>>
<<set $roomInfo['Plaid Base'] to {
  exits: [ ['Ganging Hate', 'back to hanging gate', '(Hanging Gate traversed)'] ],
  todo: "The plaid base here isn't just tacky, trust me on this one. It should be destroyed. Don't worry, there's nobody inside. Evil is lazy that way.",
  done: "The remains of the plaid base are a place you still don't want to stay, but at least it's less intimidating.",
  available: false,
  solved: false,
  looted: false,
  solvedname: "Bad Place"
  }
>>
<<set $roomInfo['Rusty Fiddlers'] to {
  exits: [ ['Ganging Hate', 'back to hanging gate', '(Hanging Gate traversed)'] ],
  todo: "Rusty fiddlers make bad music here. They look as if they could use something to give them a boost. Maybe not a temporarily and healthy boost, but a boost.",
  done: "The fusty riddlers go on about all manner of riddles, abstract or requiring specific language. At least they're having fun.",
  available: false,
  solved: false,
  looted: false,
  solvedname: "Fusty Riddlers"
  }
>>

/% endgame %/

<<set $roomInfo['Bay Hut'] to {
  exits: [ ],
  todo: "N/A",
  done: "N/A",
  available: false,
  solved: false,
  looted: false,
  solvedname: "Bay Hut"
  }
>>

/% first we take care of all the main area items %/

<<set $itemInfo['Pert Door'] to {
  initroom: 'Ganging Hate',
  useroom: 'Funny Mound',
  taken: false,
  map_piece: false,
  description: "A pert door stands here on its own. Odd!",
  success: "You place the pert door down. Somehow, it sinks into the Funny Mound, lowering it. You now have passage through.",
  reveals: [ "Harming Fights", "Weedy Nerds", "Feeling Diner" ]
}
>>

<<set $itemInfo['Hair Shirt'] to {
  initroom: 'Funny Mound',
  useroom: 'Small Isles',
  taken: false,
  map_piece: false,
  description: "A hair shirt lies here, disused and unloved. Odd!",
  success: "You share hurt in your hair shirt. People realize they are not alone. It makes everyone happy.",
  reveals: [ "Drunk Shore", "Wash Pit", "Feast Lake" ]
}
>>

<<set $itemInfo['Quick Pest'] to {
  initroom: 'Small Isles',
  useroom: 'Veering Choice',
  taken: false,
  map_piece: false,
  description: "A quick pest bounces back and forth here. It must get exhausted soon, right?",
  success: "The quick pest is ready to go again. It zips back and forth, destroying some bulwarks and opening three new passages.",
  reveals: [ "Peer Class", "Blighters Rock", "Brainy Zoo" ]
}
>>

<<set $itemInfo['Hard Candy'] to {
  initroom: 'Veering Choice',
  useroom: 'Ganging Hate',
  taken: false,
  map_piece: false,
  description: "Some hard candy is here, still in its wrapper.",
  success: "There's nothing like candy to dispel ganging hate! Even if it is not very good candy! As the ganging hate subsides, you notice other passages through.",
  reveals: [ "Yacking Hard", "Rusty Fiddlers", "Plaid Base" ]
}
>>

/% next we take care of all the back/cross-area items %/

/% from area 1 %/

<<set $itemInfo['Unpairable Buns'] to {
  initroom: 'Feeling Diner',
  useroom: 'Wash Pit',
  taken: false,
  map_piece: true,
  description: "You see several Unpairable Buns here. I mean, they probably taste okay, but they'd just look weird making a hamburger or whatever.",
  success: "The Unpairable Buns are too low-class for the sort of jokes around here. The worst of the elitists flee, leaving behind a map piece, which you take.",
  reveals: [ ]
}
>> /% 1-2 %/

<<set $itemInfo['Funk Pail'] to {
  initroom: 'Harming Fights',
  useroom: 'Peer Class',
  taken: false,
  map_piece: true,
  description: "A funk pail lies here, old and discarded, once useful for chores but no more.",
  success: "The funk pail reveals the poseurs who participate a lot in class but do not contribute anything! Faced with this truth they cannot but flee. The remaining members, glad to have the time-wasters weeded out, give you a map piece as thanks.",
  reveals: [ ]
}
>> /% 1-3 %/

<<set $itemInfo['Tech Chip'] to {
  initroom: 'Weedy Nerds',
  useroom: 'Yacking Hard',
  taken: false,
  map_piece: true,
  description: "The Weedy Nerds have discarded a tech chip here.",
  success: "The tech chip seems to be just the thing to get the Yacking, Hard to change subject. The yackers in question know just what to do with it. They had been talking about doing technical stuff for a while, but nobody ever pushed them to do anything. This chip is just what they need! As thanks, they give you a piece of the treasure map.",
  reveals: [ ]
}
>> /% 1-4 %/

/% from area 2 %/

<<set $itemInfo['Spicy Prune'] to {
  initroom: 'Feast Lake',
  useroom: 'Feeling Diner',
  taken: false,
  map_piece: true,
  description: "A spicy prune sits here untouched and not too dirty.",
  success: "The spicy prune causes an upheaval of the usually tacit and boring Feeling Diner. Conversation had gotten too whiny. The patrons plan on doing a bit more. They look around for a way to give thanks. They have it--a piece of the map you need!",
  reveals: [ ]
}
>> /% 2-1 %/

<<set $itemInfo['Snide Tracks'] to {
  initroom: 'Wash Pit',
  useroom: 'Brainy Zoo',
  taken: false,
  map_piece: true,
  description: "Snide tracks lie here. You know, the music kind.",
  success: "You feed the snide tracks to the denizens of the Brainy Zoo. Surprisingly, they digest them and have quite a lot to wash the food down with. They sit and ponder things unimaginable to humans, giving you a piece of a treasure map in gratitude.",
  reveals: [ ]
}
>> /% 2-3 %/

<<set $itemInfo['Booze Cluster'] to {
  initroom: 'Drunk Shore',
  useroom: 'Rusty Fiddlers',
  taken: false,
  map_piece: true,
  description: "A booze cluster lies here.",
  success: "The booze cluster seems to satisfy the rusty fiddlers. They discuss various things like how a raven is like a writing-desk, or how to fill a seven-gallon jug with a three- and five-gallon jug, and, indeed, what the general case is for when you can and can't do that, and how to do so in the optimum number of terms. Quite bluntly, you find it a bit boring, but they don't. They're so happy, in fact, they give you a map piece!",
  reveals: [ ]
}
>> /% 2-4 %/

/% from area 3 %/

<<set $itemInfo['Grease Pipe'] to {
  initroom: 'Blighters Rock',
  useroom: 'Harming Fights',
  taken: false,
  map_piece: true,
  description: "A Grease Pipe lies here, probably part of some trash thoughtlessly dumped.",
  success: "You hand the Grease Pipes to each of the fighters. They are glad to have such strong looking weapons! They are so consumed with winning that you did not realize you gave one to their enemy. Nevertheless, when they try to actually wield the pipes, said pipes slip from their hands. They were already pretty tired of fighting, and after a while, they realize they just want peace, and they may just be destroying the land they are fighting over.",
  reveals: [ ]
}
>> /% 3-1 %/

<<set $itemInfo['Dummy Scoop'] to {
  initroom: 'Peer Class',
  useroom: 'Feast Lake',
  taken: false,
  map_piece: true,
  description: "A dummy scoop lies here. Everyone seems to look down on it here, but it doesn't seem to be helping them much. All the (alleged) dummies, perhaps, have been scooped from such an advanced class.",
  success: "The dummy scoop leaves the feasters horrified at first, but then they realize -- here is something even faker than they are! Obviously they have work to do to be themselves, but perhaps they were further along than they thought. They hand you a map piece.",
  reveals: [ ]
}
>> /% 3-2 %/

<<set $itemInfo['Filed Wire'] to {
  initroom: 'Brainy Zoo',
  useroom: 'Plaid Base',
  taken: false,
  map_piece: true,
  description: "Some filed wire lies here. It could be hazardous!",
  success: "The filed wire lands on the tackiest part of the plaid base, and the sun glints off it. It catches flame. The base is consumed, and as you sift through the ashes, you find a map piece.",
  reveals: [ ]
}
>> /% 3-4 %/

/% from area 4 %/

<<set $itemInfo['Wee Freights'] to {
  initroom: 'Yacking Hard',
  useroom: 'Weedy Nerds',
  taken: false,
  map_piece: true,
  description: "Some Wee Freights lie here, a neat subject of conversation, but sadly these trains have no track or power of locomotion.",
  success: "The Weedy Nerds are quickly very interested in the Wee Freights. The process of moving and organizing said Freights gets longer. They analyze the structure of the Freights and build bigger ones. All this is a good workout--something the Weedy Nerds once avoided. Yet they seemed refreshed by it all. They are shocked to find exercise has cleared their mind and helped them focus on some goals and achieve others! A good bout of exercise also opens their minds to more subjective things, not just technical creations and such. They give you a piece of map for helping them realize this.",
  reveals: [ ]
}
>> /% 4-1 %/

<<set $itemInfo['Cheese on a cane'] to {
  initroom: 'Plaid Base',
  useroom: 'Drunk Shore',
  taken: false,
  map_piece: true,
  description: "Some cheese on a cane has been discarded. Mmm, cheese.",
  success: "The Cheese on a Cane, being thick, gums up the Drunk Shore and dehydrates it enough to realize ... a shrunk door! You open it. There's a map piece in there.",
  reveals: [ ]
}
>> /% 4-2 %/

<<set $itemInfo['Picky Quill'] to {
  initroom: 'Rusty Fiddlers',
  useroom: 'Blighters Rock',
  taken: false,
  map_piece: true,
  description: "A picky quill lies here. Whenever the rusty fiddlers get close, it jumps away. Who could be its rightful owner?",
  success: "The picky quill leaps from blighter to blighter, each of whom feels inspired. It's like a chemical charge, only with less withdrawal and addiction! They all feel more free to do, be, and report what they did and were. They offer you a piece of the map as thanks.",
  reveals: [ ]
}
>> /% 4-3 %/

<<set $hardmode=false>>

:: Story Widgets [widget nobr]
<<widget "thispassage">>
<<=passage()>>
<</widget>>

<<widget "solvethis">>
<<set $roomInfo[passage()].solved = true>>
<</widget>>

<<widget "roomto">>
  <<set _in=passage()>>
  <<set _my_array = $roomInfo[_in].exits[$args[0]]>>
  <<set _out = _my_array[0]>>
  <<set $traversed = [ _in ]>>
  <<set $toTraverse = [ _out ]>>
  <<set $canTraverse = true>>
  <<set $foundUnsolved = false>>
  <<for _i = 0; (_i < 25) and ($canTraverse) and (not $foundUnsolved) and (not $hardmode); _i++>>
    <<set $canTraverse = false>>
    <<for _j = 0; (_j < $toTraverse.length) and (not $foundUnsolved); _j++>>
	  <<if $roomInfo[$toTraverse[_j]].solved == false or $roomInfo[$toTraverse[_j]].looted == false>>
	    <<set $foundUnsolved = true>>
	  <<else>>
	    <<for _k = 0; _k < $roomInfo[$toTraverse[_j]].exits.length; _k++>>
		  <<set _this = $roomInfo[$toTraverse[_j]].exits[_k][0]>>
		  <<if not $traversed.includes(_this) and not $toTraverse.includes(_this)>>
		    <<run $toTraverse.push(_this)>>
	      <</if>>
	    <</for>>
	  <</if>>
	<</for>>
  <</for>>
  <<if $foundUnsolved or $hardmode>>
	  [[_my_array[1]|_my_array[0]]]
	<<else>>
	  <font color=green>(_my_array[2])</font>
  <</if>>
<</widget>>

<<widget "solvesearch">>
  <center>
  <<if def $roomInfo[_y]>>
    <<set _y=passage()>>
	<<set _anyroomyet=false>>
    <<for _a = 0; _a < $roomInfo[_y].exits.length; _a++>>
	  <<print $roomInfo[$roomInfo[_y].exits[_a]]>>
	  <<if $roomInfo[$roomInfo[_y].exits[_a][0]].available is false>>
      <<else>>
	    <<if _anyroomyet is true>>|
	      <<else>>
	      <<set _anyroomyet=true>>
	    <</if>>
        <<roomto _a>>
	  <</if>>
    <</for>>
  <<elseif _y == "Inventory" or _y == "UsePage" or _y == "Credits" or _y == "About">>
    [[As you were|$oldpsg]]
  <<else>>
  <font color=green>(likely dead end/death trap--just undo in the left column!)</font>
  <</if>>
  </center>
<</widget>>

<<widget "takelink">>
  <<set _psg=passage()>>
  <br /><<print $itemInfo[$args[0]].description>> (<<link [[Take it|_psg]]>><<set $itemInfo[$args[0]].taken=true>><<set $inventory.push($args[0])>><<set $roomInfo[_psg].looted=true>><</link>>)
<</widget>>

<<widget "showitems">>
  <<set $any_items=false>>
  <<set _psg=passage()>>
  <<set $tempitms to Object.keys($itemInfo)>>
  <<for _a = 0; _a < $tempitms.length; _a++>>
    <<set _ti=$tempitms[_a]>>
    <<if $itemInfo[_ti].taken == false>>
      <<if $itemInfo[_ti].initroom == _psg>>
	    <<takelink _ti>>
	  <</if>>
	<</if>>
  <</for>>
<</widget>>

<<widget "usethis">>
  $args[0]: [[USE THIS|UsePage][$useitem to $args[0]]]<br />
<</widget>>

<<widget "showinventory">>
  <<if $inventory.length == 0>>You are carrying nothing.
  <<else>>
    <<for _i = 0; _i < $inventory.length; _i++>>
	  <<set $temp to $inventory[_i]>>
	    <<usethis $temp>>
	<</for>>
  <</if>>
  <br />You currently have $total_map_pieces of 12 total map pieces.
<</widget>>

<<widget "usewidget">>
  <<if $itemInfo[$useitem].useroom == $oldpsg>>
  <<print $itemInfo[$useitem].success>>
  <<set $roomInfo[$itemInfo[$useitem].useroom].solved to true>>
  <<set $thisroom=$itemInfo[$useitem].reveals>>
  <<for $temp = 0; $temp < $thisroom.length; $temp++>>
    <<if Object.keys($roomInfo).contains($thisroom[$temp])>>
	  <<set $roomInfo[$thisroom[$temp]].available = true>>
	<<else>>No such room $thisroom[$temp]
      <</if>>
  <</for>>
  <<run $inventory.delete($useitem)>>
  <<if $itemInfo[$useitem].map_piece>>
    <<set $total_map_pieces += 1>>
	You now have $total_map_pieces of 12 total map pieces!
    <<if $total_map_pieces == 12>>
	You fit them all together. You see the Bay Hut and the maze that leads you through. It's time to go there.
	<<run $roomInfo[$oldpsg].exits.push(['Bay Hut', 'to the bay hut', '(final location)'])>>
	<<run $roomInfo['Bay Hut'].exits.push([$oldpsg, 'no way back', '(why go back?)'])>>
	<<set $roomInfo['Bay Hut'].available = true>>
    <</if>>
  <</if>>
  <<else>>
  Unfortunately, you can't see any way to use the $useitem here. It must be useful somewhere, though!
  <</if>>
<</widget>>

<<widget "roomstuff">>
  <<set $roomstuff=$roomInfo[passage()]>>
  <<if $roomstuff.solved == false>>$roomstuff.todo<<else>>$roomstuff.done<</if>>
<</widget>>

/% <<set $roomInfo[$itemInfo[$useitem].reveals[_b]].available = true>> %/

:: StoryMenu [StoryMenu]

<<set _labels to ['Completed areas <b>BLOCKED</b>. Click to unblock.', 'Completed areas <b>UNBLOCKED</b>. Click to block.']>>
<<set _hm to _labels[Number($hardmode)]>>

<<link "<span id='dif'>_hm</span>">>
	<<set $hardmode to not $hardmode>>
    <<set _hm to _labels[Number($hardmode)]>>
	<<replace "#dif">>_hm<</replace>>
<</link>>

<<if passage()!="UsePage" and passage()!="Inventory" and passage()!="Credits" and passage()!="About">><<set $oldpsg=passage()>><</if>>

[[Inventory]]

[[About]]

[[Credits]]

::About

The technical part for <i>Trail Stash</i> was roughly conceived in April 2023, during Spring Thing. After playing Leon Lin's <i>Insomnia</i>, which branched to 26 different endings and had some buffer against visiting the same one twice, I wondered--what about blocking off passages in Twine where they, and the rooms behind them, were done? I'd done so with parser games, first with <i>Ailihphilia</i>, but there it was a bit of a cheat, because the map had no loops. You had rooms with only one path in to the center room. So you could just search through all the out directions! Then, with <i>Low-Key Learny Jokey Journey</i>, I made something more robust and general. But Inform makes it easier to search rooms with directions, due to room properties etc.

So what about Twine? It presented a new and interesting challenge, but it was eminently doable. I build up the code in July or so, then raced near the end of September, looking through my big file of spoonerisms. In a way, it was nice to limit myself to few rooms with so little time left. I didn't have time to create the fully complex world, but I built one which I think shows a technical proof of concept, and it's less likely the joke will get old.

The game is not meant to be deep. There are sixteen rooms in a symmetrical map. There is an inner ring of four rooms, and each room leads out to three more. I originally said "Well, you could just determine where to go based on if there were any passages" but then that led to odd situations where you didn't get the four inner rooms closed off soon enough. So I added the ignore-immediate-passage property to make things more exact.

The creative part for <i>Trail Stash</i> started a while ago, because I always enjoyed spoonerisms (who doesn't?) but for parser games, there wasn't much of a puzzle to figure out spoonerisms, so it didn't seem like I could string much together, or I couldn't do it as well as <i>Nord and Bert Couldn't Make Head or Tail of It</i>. With Twine, though, hopefully the double meanings will provide chuckles before things get too, um, stale. I needed ones that roughly made sense and matched each way they were flipped. I hope you enjoy the result and it encourages you to try your own odd experiments.

::Credits

Twinery.org was a huge help for so much, both the cookbook and the people who asked questions so I didn't have to. Some of them, I looked up the question more than once, because I forgot.

Thanks to all past and current IFComp organizers. Thanks to you for taking the time to play this, and extra thanks if you find the time to judge and/or write reviews. There will be a lot more substantial games out there than this. They are worth seeing. Some may, too, be one-trick ponies like <i>Trail Stash</i>, but they may be a trick you like. Explore around and enjoy as much as you can.

((BETA TESTERS HERE))

::Inventory

<<showinventory>>

:: PassageFooter

<center><<if passage=="wrong leads">><font size=+3>FUN, AIDING, UNFADING</font><<else>><<showitems>><</if>></center>

<<solvesearch>>

:: PassageHeader

<center><<nobr>><font size=+2 color=yellow><<set _y=passage()>><<if def $roomInfo[_y] and def $roomInfo[_y].solvedname and $roomInfo[_y].solved is true>><<print $roomInfo[_y].solvedname>><<else>>_y<</if>></font><<if _y is "Inventory">> (location: $oldpsg) <</if>><</nobr>></center>

:: UsePage

<<usewidget>>

:: Funny Mound

<<roomstuff>>

Also, a blob rind lies here! You may be able to figure out what it's doing, or it might do, so you'll know whether or not you want to [[inspect it|Rob Blind]].

:: Harming Fights

<<roomstuff>>

:: Weedy Nerds

<<roomstuff>>

:: Feeling Diner

<<roomstuff>>

:: Small Isles

<<roomstuff>>

:: Drunk Shore

<<roomstuff>>

:: Wash Pit

<<roomstuff>>

:: Feast Lake

<<roomstuff>>

:: Ganging Hate

<<roomstuff>>

:: Yacking Hard

<<roomstuff>>

:: Plaid Base

<<roomstuff>>

:: Rusty Fiddlers

<<roomstuff>>

:: Veering Choice

<<roomstuff>>

:: Blighters Rock

<<roomstuff>>

:: Brainy Zoo

<<roomstuff>>

:: Peer Class

<<roomstuff>>

:: Bay Hut

What treasures await you in the bay hut? You can only dream! You worry there might be so much, you won't be able to carry it, and you'll regret whatever you didn't take, even if you have enough. You walk in with eyes closed and open them ... nothing, at first. Did you follow [[wrong leads]]?

:: Wrong Leads

Wait. No. There is a book here. It's called <i>Bold Goals</i>. Wow! It's really good. The goals aren't just about crushing people or making money, but doing things you always meant to, and hoping people can do the same. Stuff like that is more valuable than treasure, and all those cliches. And really, what else could there be than bold goals in life?

It's so good, you decide to read it again. But the pages are blank. Perhaps if you read them too often, your dreams and goals and actions would get too mechanical. Perhaps the book has some weird magic that gets drained each time someone reads it, so it has to save its magic for the next person.

Whichever. You're eager to go improve lives, and stuff. You kick a gold bowl out of the way as you exit the Bay Hut to a new life. But then you realize it couldn't hurt to start with a little capital, so you take the gold bowl with.

:: Rob Blind

Oh, no! The blob rind swells up to several times its original side in order to, uh, rob you blind. It only enveloped your belongings, not you, but you're so embarrassed by the experience, you give up. Or, you know, you can undo.
